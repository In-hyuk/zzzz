CREATE SEQUENCE MYMUSIC;
CREATE SEQUENCE MYSINGER;
-- SINGER 테이블
CREATE TABLE SINGER(
    -- NEXTVAL = 값을 주고 그 값을 증가시킴
    -- CURRVAL = 값을 주기만 함
    ID INT DEFAULT MYSINGER.NEXTVAL PRIMARY KEY,    -- ID를 입력하지 않으면 알아서 1번부터 하나씩 증가한다.
    NAME VARCHAR2(30),
    HIT_SONG_ID INT,
    CONSTRAINT FK_HIT FOREIGN KEY (HIT_SONG_ID) REFERENCES SONG(ID)
);
-- SONG 테이블
CREATE TABLE SONG(
    ID INT PRIMARY KEY,
    TITLE VARCHAR2(60) NOT NULL,
    PRICE INT
);
-- 데이터 삽입
INSERT INTO SINGER(NAME, HIT_SONG_ID) VALUES('소녀시대',1);
INSERT INTO SINGER(NAME, HIT_SONG_ID) VALUES('원더걸스',2);
INSERT INTO SINGER(NAME, HIT_SONG_ID) VALUES('동방신기',3);

INSERT INTO SONG VALUES(MYMUSIC.NEXTVAL, 'GEE', 100000);
INSERT INTO SONG VALUES(MYMUSIC.NEXTVAL, 'TELL ME', 90000);
INSERT INTO SONG VALUES(MYMUSIC.NEXTVAL, 'HUG', 80000);
INSERT INTO SONG VALUES(MYMUSIC.NEXTVAL, '거짓말', 70000);
INSERT INTO SONG VALUES(MYMUSIC.NEXTVAL, '촛불', 50000);

SELECT NAME 가수이름, TITLE 히트곡이름 FROM SINGER JOIN SONG ON SINGER.HIT_SONG_ID = SONG.ID;

-- JOIN도 여러 종류가 있음
-- LEFT JOIN, RIGHT JOIN, FULL JOIN이 있음
-- 일반적인 JOIN은 INNER JOIN이라고 함
-- INNER JOIN의 경우에는 공통된 값, 그러니까 둘 다 존재하는 것만 표시해줌

-- RIGHT JOIN의 경우 오른쪽 테이블에 있는 데이터들은 무조건 다 출력함
SELECT NAME 가수이름, TITLE 히트곡이름 FROM SINGER RIGHT JOIN SONG ON SINGER.HIT_SONG_ID = SONG.ID;
INSERT INTO SINGER(NAME) VALUES('이동준');
-- LEFT JOIN의 경우 왼쪽 테이블에 있는 데이터들은 무조건 다 출력함
SELECT NAME 가수이름, TITLE 히트곡이름 FROM SINGER LEFT JOIN SONG ON SINGER.HIT_SONG_ID = SONG.ID;
-- 전부 다 보여줌(왼쪽, 오른쪽 전부)
SELECT NAME 가수이름, TITLE 히트곡이름 FROM SINGER FULL JOIN SONG ON SINGER.HIT_SONG_ID = SONG.ID;

--DROP TABLE SINGER;
--DROP TABLE SONG;
-- --------------------------------------------------------------------
CREATE SEQUENCE SAMSUNGPERSON;
CREATE TABLE MYSAMSUNGPEOPLE(
    ID INT PRIMARY KEY,
    NAME VARCHAR2(30) NOT NULL,
    BOSS_ID INT
);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '이건희', SAMSUNGPERSON.CURRVAL);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '홍라희', SAMSUNGPERSON.CURRVAL);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '이부진', 1);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '이재용', 1);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '신라호텔', 3);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '삼성전자', 4);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '수원삼성', 4);
INSERT INTO MYSAMSUNGPEOPLE VALUES (SAMSUNGPERSON.NEXTVAL, '삼성라이온즈', 4);

SELECT * FROM MYSAMSUNGPEOPLE;
SELECT A.NAME 보스, B.NAME 이름 FROM MYSAMSUNGPEOPLE A JOIN MYSAMSUNGPEOPLE B ON A.ID=B.BOSS_ID;







